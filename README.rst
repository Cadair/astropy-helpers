astropy-helpers
===============

* Stable versions: https://pypi.org/project/astropy-helpers/
* Development version, issue tracker: https://github.com/astropy/astropy-helpers

**Warning:** Please note that version ``v3.0`` and later of ``astropy-helpers`` 
requires Python 3.5 or later. If you wish to maintain Python 2 support
for your package that uses ``astropy-helpers``, then do not upgrade the
helpers to ``v3.0+``. We will still provide Python 2.7 compatible
releases on the ``v2.0.x`` branch during the lifetime of the ``astropy``
core package LTS of ``v2.0.x``.

About
-----

This project provides a Python package, ``astropy_helpers``, which includes
many build, installation, and documentation-related tools used by the Astropy
project, but packaged separately for use by other projects that wish to
leverage this work.  The motivation behind this package and details of its
implementation are in the accepted
`Astropy Proposal for Enhancement (APE) 4 <https://github.com/astropy/astropy-APEs/blob/master/APE4.rst>`_.

``astropy_helpers`` includes a special "bootstrap" module called
``ah_bootstrap.py`` which is intended to be used by a project's setup.py in
order to ensure that the ``astropy_helpers`` package is available for
build/installation.

As described in `APE4 <https://github.com/astropy/astropy-APEs/blob/master/APE4.rst>`_, the version
numbers for ``astropy_helpers`` follow the corresponding major/minor version of
the `astropy core package <http://www.astropy.org/>`_, but with an independent
sequence of micro (bugfix) version numbers. Hence, the initial release is 0.4,
in parallel with Astropy v0.4, which will be the first version  of Astropy to
use ``astropy-helpers``.

For examples of how to implement ``astropy-helpers`` in a project,
see the ``setup.py`` and ``setup.cfg`` files of the
`Affiliated package template <https://github.com/astropy/package-template>`_.

What does astropy-helpers provide?
----------------------------------

Custom setup.py commands
^^^^^^^^^^^^^^^^^^^^^^^^

The main part of astropy-helpers is to provide customized setuptools commands.
For example, in a package that uses astropy-helpers, the following command
will be available::

    python setup.py build_docs

and this command is implemented in astropy-helpers.

The commands we provide or customize are:

**python setup.py test**

This command will automatically build the package, install it to a temporary
directory, and run the tests using `pytest <http://pytest.org/>`_ on this
installed version. Note that the bulk of this command is actually defined
in ``astropy.tests.command.AstropyTest`` - here we simply define the custom
setuptools command.

**python setup.py sdist**

We redefine ``sdist`` to use the version from distutils rather than from
setuptools, as the setuptools version requires duplication of information
in ``MANIFEST.in``.

**python setup.py build_docs**

This command will automatically build the package, then run sphinx to build
the documentation. Sphinx itself provides a custom setuptools command, which we
expand with the following options:

* ``-w``: set the return code to 1 if there are any warnings during the build
  process.

* ``-l``: completely clean previous builds, including files generated by
  the sphinx-automodapi package (which creates API pages for different
  functions/classes).

* ``-n``: disable the intersphinx option.

* ``-o``: open the documentation in a browser if a build finishes successfully.

**python setup.py build_ext**

This is also used when running ``build`` or ``install``. We add several features
compared to the default ``build_ext`` command:

* For packages with C/Cython extensions, we create a ``packagename._compiler``
  submodule that contains information about the compilers used.

* Packages that need to build C extensions using the Numpy C API, we allow
  those packages to define the include path as ``'numpy'`` as opposed to having
  to import Numpy and call ``get_include``. The goal is to solve the issue that
  if one has to import Numpy to define extensions, then Numpy has to be
  installed/available before the package is installed, which means that one
  needs to install Numpy in a separate installation step.

* We detect broken compilers and replace them with other compilers on-the-fly
  unless the compiler is explicitly specified with the ``CC`` environment
  variable.

* If Cython is not installed, then we automatically check for generated C files
  (which are normally present in the stable releases) and give a nice error
  if these are not found.

Version helpers
^^^^^^^^^^^^^^^^

Another piece of functionality we provide in astropy-helpers is the ability
to generate a ``packagename.version`` file that includes functions that
automatically set the version string for developer versions, to e.g.
``3.2.dev22213`` so that each developer version has a unique number, and also
provide variables such as ``major``, ``minor``, and ``bugfix``, as well as
``version_info`` (a tuple of the previous three values), a ``release`` flag that
indicates whether we are using a stable release, and several other complementary
variables.

OpenMP helpers
^^^^^^^^^^^^^^

We provide a helper function ``add_openmp_flags_if_available`` that can be used
to automatically add OpenMP flags for C/Cython extensions, based on whether
OpenMP is available and produces executable code.

.. image:: https://travis-ci.org/astropy/astropy-helpers.svg
  :target: https://travis-ci.org/astropy/astropy-helpers

.. image:: https://ci.appveyor.com/api/projects/status/rt9161t9mhx02xp7/branch/master?svg=true
  :target: https://ci.appveyor.com/project/Astropy/astropy-helpers

.. image:: https://codecov.io/gh/astropy/astropy-helpers/branch/master/graph/badge.svg
  :target: https://codecov.io/gh/astropy/astropy-helpers
